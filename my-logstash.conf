# ip address and remaining fields to be seperated along with timestamp  to avoid parse errors and also include records with out the servername

input {  
   file { 
      path => "C:/serverlog/serverlog-input.log"
      start_position => "beginning"
      sincedb_path => "C:/Users/Parthiban.C/Downloads/logstash-8.8.2/data/plugins/inputs/file/sincedb"
   }
}

# {"message":"- ::ffff:10.121.2.100 - - - POST /vehicles/flashFile/updateProcessParams 200 132 9.466 ms MahindraServerTest","level":"info","timestamp":"2023-08-02 00:00:00"}

filter {
    grok {
        match => {
            "message" => "- ::ffff:%{IP:ip_address} - - - %{WORD:http_method} %{URIPATHPARAM:request} %{NUMBER:response_code} %{NUMBER:response_bytes} %{NUMBER:response_time} ms (?:%{WORD:server_name})?"
        }
        tag_on_failure => ["_grokparsefailure"]
    }

    grok {
        match => {
            "message" => ".*\"timestamp\":\"%{TIMESTAMP_ISO8601:timestamp}\".*"
        }
    }

    date {
        match => ["timestamp", "yyyy-MM-dd HH:mm:ss"]
    }

    mutate {
        remove_field => ["message", "log", "event", "host", "@version", "@timestamp"]
    }
}


output {

   if "_grokparsefailure" not in [tags] {
        file {
      path => "C:/serverlog/serverlog-output.log"
      
   }
   }
   
}
